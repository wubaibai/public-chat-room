{"version":3,"sources":["components/organisms/LoginForm/index.module.css","components/molecules/Message/index.module.css","routes/index.module.css","components/organisms/UserHeader/index.module.css","components/organisms/CommentForm/index.module.css","components/atoms/Avatar/index.module.css","components/atoms/MessageText/index.module.css","components/atoms/Name/index.module.css","components/organisms/CommentList/index.module.css","components/atoms/Avatar/index.js","components/atoms/MessageText/index.js","components/atoms/Name/index.js","components/organisms/UserHeader/index.js","components/molecules/Message/index.js","components/organisms/CommentList/index.js","modules/firebase.js","components/organisms/CommentForm/index.js","components/organisms/LoginForm/index.js","routes/index.js","index.js"],"names":["module","exports","Avatar","className","style","avatar","MessageText","text","messageText","UserName","name","username","UserHeader","React","memo","user","userHeader","Name","logoutButton","Message","message","info","ListEnd","listEndRef","useRef","useEffect","current","scrollIntoView","ref","CommentList","comments","users","list","map","comment","userId","id","commentList","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseRef","CommentForm","useState","setMessage","commentInput","focus","commentForm","onSubmit","e","preventDefault","push","timestamp","Date","getTime","error","input","type","placeholder","value","onChange","target","LoginForm","setUser","setName","nameInputRef","loginForm","title","subTitle","newUser","set","err","key","ChatRoom","setComments","setUsers","firebase","initializeApp","database","initFirebase","on","usersSnapshot","result","forEach","userSnapshot","val","orderByChild","commentsSnapshot","commentSnapshot","commentData","off","chatroom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.48f26622.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"LoginForm_loginForm__3Hfw0\",\"title\":\"LoginForm_title__3-Kce\",\"subTitle\":\"LoginForm_subTitle__QeLVi\",\"input\":\"LoginForm_input__2Xalp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__jaYcJ\",\"avatar\":\"Message_avatar__1viwL\",\"info\":\"Message_info__2YFxR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatroom\":\"routes_chatroom__161VA\",\"commentList\":\"routes_commentList__2JqDw\",\"commentForm\":\"routes_commentForm__2gdhO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userHeader\":\"UserHeader_userHeader__1lOqt\",\"logoutButton\":\"UserHeader_logoutButton__iFt7V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commentForm\":\"CommentForm_commentForm__2LWC_\",\"input\":\"CommentForm_input__9etBS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__1miks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageText\":\"MessageText_messageText__1RQM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"username\":\"Name_username__1wtXG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commentList\":\"CommentList_commentList__3nXfg\"};","import React from 'react';\n\nimport style from './index.module.css';\n\nconst Avatar = () => {\n    return (\n        <div className={style.avatar}></div>\n    )\n};\n\nexport default Avatar;\n","import React from 'react';\n\nimport style from './index.module.css';\n\nconst MessageText = ({ text }) => {\n    return (\n        <div className={style.messageText}>{text}</div>\n    )\n};\n\nexport default MessageText;\n","import React from 'react';\n\nimport style from './index.module.css';\n\nconst UserName = ({ name }) => {\n    return (\n        <div className={style.username}>{name}</div>\n    )\n};\n\nexport default UserName;\n","import React from 'react';\n\nimport Avatar from '../../atoms/Avatar/index';\nimport MessageText from '../../atoms/MessageText/index';\nimport Name from '../../atoms/Name/index';\nimport style from './index.module.css';\n\nconst UserHeader = React.memo(({\n    user,\n}) => {\n    return (\n        <div className={style.userHeader}>\n            <Avatar />\n            <Name name={user.name} />\n            <button className={style.logoutButton}>Logout</button>\n        </div>\n    )\n});\n\nexport default UserHeader;\n","import React from 'react';\n\nimport Avatar from '../../atoms/Avatar/index';\nimport MessageText from '../../atoms/MessageText/index';\nimport Name from '../../atoms/Name/index';\nimport style from './index.module.css';\n\nconst Message = React.memo(({\n    name,\n    text,\n}) => {\n    return (\n        <div className={style.message}>\n            <div className={style.avatar}>\n                <Avatar />\n            </div>\n            <div className={style.info}>\n                <Name name={name} />\n                <MessageText text={text} />\n            </div>\n        </div>\n    )\n});\n\nexport default Message;\n","import React, { useEffect, useRef } from 'react';\n\nimport Message from '../../molecules/Message/index';\nimport style from './index.module.css';\n\nconst ListEnd = () => {\n    const listEndRef = useRef();\n\n    useEffect(() => {\n        listEndRef.current.scrollIntoView();\n    });\n\n    return (\n        <div ref={listEndRef} />\n    );\n};\n\nconst CommentList = ({ comments, users }) => {\n    const list = comments.map((comment) => (\n        <Message\n            key={comment.id}\n            name={users[comment.userId].name}\n            text={comment.text}\n        />\n    ));\n\n    return (\n        <div className={style.commentList}>\n            {list}\n            <ListEnd />\n        </div>\n    );\n};\n\nexport default CommentList;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDdkgX0E-3X8mkxQ3krNb6J1lwse3dODIw\",\n    authDomain: \"inline-chat-room-code-test.firebaseapp.com\",\n    databaseURL: \"https://inline-chat-room-code-test-default-rtdb.firebaseio.com\",\n    projectId: \"inline-chat-room-code-test\",\n    storageBucket: \"inline-chat-room-code-test.appspot.com\",\n    messagingSenderId: \"663524451356\",\n    appId: \"1:663524451356:web:b804a2937a8cd91e83ebd9\",\n    measurementId: \"G-JRVBKP32JR\"\n};\n\nexport const firebaseRef = {\n    comments: null,\n    users: null,\n};\n\nexport const init = () => {\n    firebase.initializeApp(firebaseConfig);\n\n    const database = firebase.database();\n    firebaseRef.comments = database.ref('room/comments');\n    firebaseRef.users = database.ref('room/users');\n};\n\nexport default 'firebase';\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport { firebaseRef } from '../../../modules/firebase';\nimport style from './index.module.css';\n\nconst CommentForm = ({\n    user,\n}) => {\n    const [message, setMessage] = useState('');\n    const commentInput = useRef(null);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        if (!firebaseRef.comments || !message) {\n            return;\n        }\n\n        firebaseRef.comments.push({\n            text: message,\n            userId: user.id,\n            timestamp: new Date().getTime(),\n        }, (error) => {\n            if (error) {\n              // The write failed...\n            } else {\n                setMessage('');\n            }\n        });\n    };\n\n    useEffect(() => {\n        commentInput.current.focus();\n    }, [commentInput]);\n\n    return (\n        <div className={style.commentForm}>\n            <form onSubmit={onSubmit}>\n                <input\n                    ref={commentInput}\n                    className={style.input}\n                    type=\"text\"\n                    placeholder=\"Typing Message Here\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                />\n            </form>\n        </div>\n    )\n};\n\nexport default CommentForm;\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport { firebaseRef } from '../../../modules/firebase';\nimport style from './index.module.css';\n\nconst LoginForm = ({ setUser }) => {\n    const [name, setName] = useState('');\n    const nameInputRef = useRef(null);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        if (!name) {\n            return;\n        }\n\n        const newUser = firebaseRef.users.push();\n        newUser.set({\n            name,\n        }, (err) => {\n            if (err) {\n                return;\n            }\n\n            setUser({\n                name: name,\n                id: newUser.key,\n            });\n        });\n    };\n\n    useEffect(() => {\n        nameInputRef.current.focus();\n    }, [nameInputRef]);\n\n    return (\n        <div className={style.loginForm}>\n            <div>\n                <h1 className={style.title}>Welcome to chat room</h1>\n                <h3 className={style.subTitle}>Please give your name to join :)</h3>\n                <form onSubmit={onSubmit}>\n                    <input\n                        ref={nameInputRef}\n                        className={style.input}\n                        type=\"text\"\n                        value={name}\n                        placeholder=\"What's your name?\"\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </form>\n            </div>\n        </div>\n    )\n};\n\nexport default LoginForm;\n","import React, { useEffect, useState } from 'react';\n\nimport UserHeader from '../components/organisms/UserHeader/index'\nimport CommentList from '../components/organisms/CommentList/index';\nimport CommentForm from '../components/organisms/CommentForm/index';\nimport LoginForm from '../components/organisms/LoginForm/index';\nimport { init as initFirebase, firebaseRef } from '../modules/firebase';\nimport style from './index.module.css';\n\nconst ChatRoom = React.memo(() => {\n    const [comments, setComments] = useState([]);\n    const [users, setUsers] = useState({});\n    const [user, setUser] = useState({});\n\n    useEffect(() => {\n        initFirebase();\n\n        firebaseRef.users.on('value', (usersSnapshot) => {\n            const result = {};\n            usersSnapshot.forEach((userSnapshot) => {\n                result[userSnapshot.key] = userSnapshot.val();\n            });\n            setUsers(result);\n        });\n\n        firebaseRef.comments.orderByChild('timestamp').on('value', (commentsSnapshot) => {\n            const result = [];\n            commentsSnapshot.forEach((commentSnapshot) => {\n                const commentData = commentSnapshot.val();\n                commentData.id = commentSnapshot.key;\n                result.push(commentData);\n            });\n            setComments(result);\n        });\n\n        /**\n         * For Quick Development before localstorage setup\n         */\n        setUser({\n            name: 'Cathy',\n            id: '-MOU5gRREq4X8BkWqjU3',\n        });\n\n        return () => {\n            firebaseRef.users.off();\n            firebaseRef.comments.off();\n        };\n    }, []);\n\n    if (user.name && user.id) {\n        return (\n            <div className={style.chatroom}>\n                <UserHeader user={user} />\n                <div className={style.commentList}>\n                    <CommentList comments={comments} users={users}/>\n                </div>\n                <div className={style.commentForm}>\n                    <CommentForm user={user} />\n                </div>\n            </div>\n        )\n    } else {\n        return <LoginForm setUser={setUser} />\n    }\n});\n\nexport default ChatRoom;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ChatRoom from './routes/index';\n\nReactDOM.render(\n    <ChatRoom />,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}